{"version":3,"sources":["component/video/video.mp4","App.js","index.js"],"names":["module","exports","App","useState","currentAccount","setCurrentAccount","oldMessage","setMessage","allBooks","setAllBooks","contractAddress","getAllBooks","a","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","bookPortalContract","Contract","contractABI","books","booksCleaned","forEach","book","push","address","recommender","timestamp","Date","message","console","log","useEffect","onNewBook","from","prevState","on","off","abi","checkIfWalletIsConnected","request","method","accounts","length","account","connectWallet","alert","getTotalBooks","count","toNumber","gasLimit","bookTxn","hash","wait","className","autoPlay","loop","muted","style","position","width","left","top","height","objectFit","transform","zIndex","src","sample","type","trigger","id","name","defaultValue","onChange","event","target","value","onClick","map","index","key","backgroundColor","marginTop","padding","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a3f713d1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/video.16f8cc30.mp4\";","import Popup from 'reactjs-popup';\r\n//update the utils file everytime you change the contract\r\n\r\nimport { ethers } from \"ethers\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport './App.css';\r\nimport abi from \"./utils/BookWall.json\"\r\n//This is what you pasted that you found in the contract code\r\nimport sample from \"./component/video/video.mp4\";\r\n\r\nconst App = () => {\r\n  /*\r\n  * Just a state variable we use to store our user's public wallet.\r\n  */\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n\r\n  //Trying to let the user send individual messages\r\n  const [oldMessage, setMessage] = useState(\"This is a message\");\r\n\r\n   /*\r\n   * All state property to store all waves\r\n   */\r\n   const [allBooks, setAllBooks] = useState([]);\r\n\r\n  //Variable for the contact address\r\n  const contractAddress = \"0xe4f6168F8C25790c0a2988f25af59d509AD629FA\";\r\n\r\n  /*\r\n   * Create a method that gets all waves from your contract\r\n   */\r\n  const getAllBooks = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const bookPortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n\r\n        /*\r\n         * Call the getAllWaves method from your Smart Contract\r\n         */\r\n       const books = await bookPortalContract.getAllBooks();\r\n\r\n\r\n        /*\r\n         * We only need address, timestamp, and message in our UI so let's\r\n         * pick those out\r\n         */\r\n        let booksCleaned = [];\r\n        books.forEach(book => {\r\n          booksCleaned.push({\r\n            address: book.recommender,\r\n            timestamp: new Date(book.timestamp * 1000),\r\n            message: book.message\r\n          });\r\n        });\r\n\r\n        /*\r\n         * Store our data in React State\r\n         */\r\n        setAllBooks(booksCleaned);\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\")\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let bookPortalContract;\r\n  \r\n    const onNewBook = (from, timestamp, message) => {\r\n      console.log(\"NewBook\", from, timestamp, message);\r\n      setAllBooks(prevState => [\r\n        ...prevState,\r\n        {\r\n          address: from,\r\n          timestamp: new Date(timestamp * 1000),\r\n          message: message,\r\n        },\r\n      ]);\r\n    };\r\n  \r\n    if (window.ethereum) {\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      const signer = provider.getSigner();\r\n  \r\n      bookPortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n      bookPortalContract.on(\"NewBook\", onNewBook);\r\n    }\r\n  \r\n    return () => {\r\n      if (bookPortalContract) {\r\n        bookPortalContract.off(\"NewBook\", onNewBook);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  //referbces abi content\r\n  const contractABI = abi.abi;\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        console.log(\"Make sure you have metamask!\");\r\n        return;\r\n      } else {\r\n        console.log(\"We have the ethereum object\", ethereum);\r\n      }\r\n\r\n      /*\r\n      * Check if we're authorized to access the user's wallet, picks up the first account if there are multiple in the wallet\r\n      */\r\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\r\n\r\n      if (accounts.length !== 0) {\r\n        const account = accounts[0];\r\n        console.log(\"Found an authorized account:\", account);\r\n        setCurrentAccount(account)\r\n      } else {\r\n        console.log(\"No authorized account found\")\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Implement your connectWallet method here\r\n  */\r\n   const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        alert(\"Get MetaMask!\");\r\n        return;\r\n      }\r\n\r\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\r\n\r\n      console.log(\"Connected\", accounts[0]);\r\n      setCurrentAccount(accounts[0]);\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n\r\n  //functions that gets the value of whatever your recomendation is\r\n  const handleChange = event => {\r\n    setMessage(event.target.value);\r\n    \r\n\r\n  }\r\n\r\n\r\n  \r\n\r\n  const book = async () => {\r\n    try {\r\n      const {ethereum} = window;\r\n\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner(); //abstraction of an ETH account that can be used to sign messages and transactions\r\n        //We use ethers to help our frontend talk to the contract\r\n\r\n        const bookPortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n        //this helps you read data from your contract\r\n\r\n        let count = await bookPortalContract.getTotalBooks();\r\n        console.log(\"Retrieved total wave count...\", count.toNumber());\r\n\r\n        \r\n        \r\n\r\n\r\n        /*\r\n        * Execute the actual wave from your smart contract\r\n        */\r\n        const bookTxn = await bookPortalContract.book(oldMessage, { gasLimit: 300000});\r\n        console.log(\"Mining...\", bookTxn.hash);\r\n\r\n        await bookTxn.wait();\r\n        console.log(\"Mined -- \", bookTxn.hash);\r\n\r\n        count = await bookPortalContract.getTotalBooks();\r\n        console.log(\"Retrieved total wave count...\", count.toNumber());\r\n        \r\n\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n    getAllBooks();\r\n  }, [])\r\n\r\n  //getAllBooks();\r\n  \r\n  return (\r\n    <div className=\"mainContainer\">\r\n\r\n\r\n      <div className=\"dataContainer\">\r\n      <video autoPlay loop muted\r\n       style={{\r\n          position: \"absolute\",\r\n          width: \"100%\",\r\n          left: \"50%\",\r\n          top: \"50%\",\r\n          height: \"100%\",\r\n          objectFit: \"cover\",\r\n          transform: \"translate(-50%, -50%)\",\r\n          zIndex:\"-1\"\r\n       }}\r\n       >\r\n        <source src={sample} type=\"video/mp4\"/>\r\n      </video>\r\n        <div className=\"header\">\r\n        Welcome to BookWall\r\n        </div>\r\n\r\n        <div className=\"bio\">\r\n        Shoot me a book recommendation and if I like it I will send you some ETH $$$\r\n\r\n        </div>\r\n        <div>\r\n          \r\n        <Popup trigger={<input\r\n            type=\"text\"\r\n            id=\"message\"\r\n            name=\"message\"\r\n            defaultValue={\"Type your recommendation :))\"}\r\n            onChange={handleChange}\r\n            />} position=\"left center\">\r\n          <div className=\"popup\">You can only recommend 1 book every 15 minutes</div>\r\n        </Popup>\r\n        </div>\r\n\r\n\r\n        <button className=\"waveButton\" onClick={book}>\r\n          Send It\r\n        </button>\r\n\r\n        {/*\r\n        * If there is no currentAccount render this button\r\n        */}\r\n        {!currentAccount && (\r\n          <button className=\"waveButton\" onClick={connectWallet}>\r\n            Connect Wallet\r\n          </button>\r\n        )}\r\n\r\n        {allBooks.map((book, index) => {\r\n          return (\r\n            <div key={index} style={{ backgroundColor: \"azure\", marginTop: \"16px\", padding: \"8px\" }}>\r\n              <div>Address: {book.address}</div>\r\n              <div>Time: {book.timestamp.toString()}</div>\r\n              <div>Message: {book.message}</div>\r\n            </div>)\r\n        })}\r\n\r\n      </div>\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default App\r\n\r\n\r\n//Inside utils we copy and paste the contect of the json file inside the contracts folder of our contract so that it can talk with our frontend","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}